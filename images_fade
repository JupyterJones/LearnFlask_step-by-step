#!/home/jack/Desktop/FlaskAppArchitect_Flask_App_Creator/env/bin/python
import glob
import os
import random
import shutil
import subprocess
import uuid
import io
import cv2
from flask import Flask, Response, jsonify, redirect, render_template,request, send_file, send_from_directory, url_for
from icecream import ic
from moviepy.editor import AudioFileClip, CompositeVideoClip,ImageClip, VideoFileClip, clips_array, concatenate_videoclips
from PIL import Image, ImageDraw
from werkzeug.utils import secure_filename
import logging
from logging.handlers import RotatingFileHandler

app = Flask(__name__)

# Create a logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create a formatter for the log messages
formatter = logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')

# Create a file handler to write log messages to a file
file_handler = RotatingFileHandler(
    'Logs/FADE.log', maxBytes=10000, backupCount=1)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)

# The following line is unnecessary, as you've already configured a handler above.
# logging.basicConfig(filename='Logs/FADE.log', level=logging.DEBUG)

# Now, you can use the logger for logging messages
#logger.debug('This is a debug message')
#logger.info('This is an info message')
#logger.warning('This is a warning message')
#logger.error('This is an error message')
#logger.critical('This is a critical message')

@app.route('/favicon.ico')
def favicon():
    # Set the size of the favicon
    size = (16, 16)

    # Create a new image with a transparent background
    favicon = Image.new('RGBA', size, (0, 0, 0, 0))

    # Create a drawing object
    draw = ImageDraw.Draw(favicon)

    # Draw a yellow square
    square_color = (0, 0, 55)
    draw.rectangle([(0, 0), size], fill=square_color)

    # Draw a red circle
    circle_center = (size[0] // 2, size[1] // 2)
    circle_radius = size[0] // 3
    circle_color = (0, 0, 255)
    draw.ellipse([(circle_center[0] - circle_radius, circle_center[1] - circle_radius),
                  (circle_center[0] + circle_radius, circle_center[1] + circle_radius)],
                 fill=circle_color)

    # Save the image as a file
    favicon.save('static/favicon.ico', format='ICO')
    favicon.save('static/favicon.png', format='PNG')
    ic("favicon: ", favicon)
    ic("favicon.ico: ", '.git/static/favicon.png')
    ic("favicon.ico: ", 'static/favicon.png')
    return send_from_directory('static', 'favicon.ico', mimetype='image/x-icon')


SDIR = "static/"
logger.debug("SDIR: ", SDIR)
# Define the file path to store the script content
script_file = os.path.join(os.getcwd(), SDIR, 'scripts', 'scripts.js')
app.secret_key = os.urandom(24)

app = Flask(__name__)


def get_an_image():
    image_dir = glob.glob("static/images/*")
    #images = glob.glob(image_dir)
    image_dir = sorted(image_dir)
    ic("image_dir: ", image_dir)
    return image_dir


def list_image_directories():
    image_directories = get_an_image()
    ic("image_directories: ", image_directories)
    return image_directories


def fix_video():
    try:
        command = "ffmpeg -i static/assets/outputxx.mp4 -vf fps=30 -y static/assets/output.mp4"
        subprocess.check_call(command, shell=True)
    except Exception as e:
        pass
    return "static/assets/output.mp4"


@app.route('/')
def index():
    fix_video()
    # List available image directories
    image_directories = list_image_directories()
    logger.debug("LINE 117: ", image_directories)
    video = 'static/assets/framed_final_output.mp4'
    video2 = 'static/assets/output.mp4'
    video2 = video2.replace('static/', "")  # /assets/final_output.mp4'
    video = video.replace('static/', "")  # /assets/final_output.mp4'
    ic("video: ", video)
    ic("video2: ", video2)
    return render_template('fade_index.html', image_directories=image_directories, video=video, video2=video2)


@app.route('/fade_index')
def fade_index():
    # List available image directories
    image_directories = list_image_directories()
    logger.debug("LINE 56: ", image_directories)
    video = 'static/assets/framed_final_output.mp4'
    video2 = 'static/assets/output.mp4'
    video2 = video2.replace('static/', "")  # /assets/final_output.mp4'
    video = video.replace('static/', "")  # /assets/final_output.mp4'
    ic("video: ", video)
    ic("video2: ", video2)   
    
    return render_template('fade_index.html', image_directories=image_directories, video=video, video2=video2)


def get_an_mp3():
    mp3s = random.choice(glob.glob("static/free_no_attribute_music/*.mp3"))
    return mp3s


@app.route('/generate_video', methods=['POST'])
def generate_video():
    try:
        selected_directory = request.form['image_directories']

        if not selected_directory:
            return redirect(url_for('fade_index'))

        # List all image files in the selected directory
        image_files = []
        logger.debug("selected_directory: ", selected_directory)
        for root, dirs, files in os.walk(selected_directory):
            for file in files:
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                    image_files.append(os.path.join(root, file))
        logger.debug("image_files: ", image_files)
        if not image_files:
            return render_template('fade_index.html', video='')

        # Shuffle the image files to mix them randomly
        random.shuffle(image_files)

        # Create a temporary directory to store the resized images
        temp_dir = 'temp/'
        os.makedirs(temp_dir, exist_ok=True)

        # Load and resize the images
        resized_images = []
        cnt=0
        for image_file in image_files:
            cnt = cnt +1
            ic("image_file: ", image_file, cnt)
            im = Image.open(image_file)
            SIZE = im.size

            img = cv2.imread(image_file)
            # Resize to the same size as the original image
            img = cv2.resize(img, SIZE)
            resized_images.append(img)

        # Create a video writer
        out_path = 'static/assets/outputxx.mp4'
        # You may need to change the codec depending on your system
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(out_path, fourcc, 30, SIZE)
        command = "ffmpeg -i static/assets/outputxx.mp4 -vf fps=30 -y static/assets/output.mp4"

        subprocess.check_call(command, shell=True)

        video_duration = 0

        # Create the video with fading transitions
        for i in range(len(resized_images)):
            if video_duration >= 58:  # Limit video to 58 seconds
                break

            img1 = resized_images[i]
            # Wrap around to the first image
            img2 = resized_images[(i + 1) % len(resized_images)]
            # changing the alpha step size will change the duration of the fade effect
            step_size = 5
            # Gradually change alpha from 0 to 100 for fade effect
            for alpha in range(0, 150):
                alpha /= 150.0
                blended = cv2.addWeighted(img1, 1 - alpha, img2, alpha, 0)
                out.write(blended)
                video_duration += 1 / 30  # Assuming 30 FPS

        out.release()

        # Prepare an audio clip of the same duration (58 seconds)
        # Replace with your audio file path
        audio_clip = AudioFileClip(get_an_mp3())
        audio_clip = audio_clip.subclip(0, 58)  # Limit audio to 58 seconds
        # Load the video clip
        video_clip = VideoFileClip(out_path)

        # Set the audio of the video clip
        video_clip = video_clip.set_audio(audio_clip)

        # Save the final video with music
        final_output_path = 'static/assets/final_output.mp4'
        uid = str(uuid.uuid4())  # Generate a unique ID using uuid
        mp4_file = os.path.join("static", "assets", f"{uid}.mp4")

        video_clip.write_videofile(final_output_path, codec='libx264')
        shutil.copyfile(final_output_path, mp4_file)
        ic("mp4_file: ", mp4_file)
        ic("final_output_path: ", final_output_path)
        # return render_template('fade_index.html', video='assets/final_output.mp4',video2='assets/framed_final_output.mp4')
        return redirect(url_for('frame_final_output'))

    except Exception as e:
        # Handle any exceptions
        return "An error occurred. Please check the logs for details."


@app.route('/frame_final_output')
def frame_final_output():
    logger.debug("WE MADE IT HERE !")
    try:
        # Load the final output video
        final_output_path = 'static/assets/final_output.mp4'
        final_video_clip = VideoFileClip(final_output_path)
        logger.debug(final_video_clip.size)

        # Load the PNG overlay frame
        # Replace with the actual path to your overlay frame
        overlay_frame_path = 'static/overlay/frame.png'
        # Load the overlay frame as an image
        overlay_frame = ImageClip(overlay_frame_path)

        # Resize the overlay frame to match the video's dimensions
        overlay_frame = overlay_frame.resize(final_video_clip.size)
        logger.debug("FRAME SIZE: ", overlay_frame.size)

        # Create a list of overlay frames with the desired duration
        overlay_frames = [overlay_frame.set_duration(58)]

        # Concatenate the overlay frames to match the final video's duration
        overlay = concatenate_videoclips(overlay_frames, method="compose")

        # Composite the overlay onto the final video
        final_video_with_overlay = CompositeVideoClip(
            [final_video_clip.set_duration(58), overlay])
        uid = str(uuid.uuid4())  # Generate a unique ID using uuid
        frame_file = os.path.join("static", "final_videos", f"{uid}framed.mp4")
        # Write the video with the overlay to a new file
        framed_final_output_path = 'static/assets/framed_final_output.mp4'
        final_video_with_overlay.write_videofile(
            framed_final_output_path, codec='libx264')
        shutil.copyfile(framed_final_output_path, frame_file)
        return render_template('fade_index.html', video='assets/output.mp4', video2='assets/framed_final_output.mp4')

    except Exception as e:
        # Handle any exceptions
        logger.debug("Exception: ", e)
        return "An error occurred. Please check the logs for details."


@app.route('/find_mp4')
def find_mp4():
    final_videos_dir = "static/final_videos/"
    # List all MP4 files in the final_videos directory
    mp4_files = [f for f in os.listdir(final_videos_dir) if f.endswith('.mp4')]

    # Log the list of MP4 files
    app.logger.info("List of MP4 files: %s", mp4_files)

    return render_template('display.html', mp4_files=mp4_files)


if __name__ == '__main__':
    print("Served on port 5500")
    app.run(debug=True, port=5500)
